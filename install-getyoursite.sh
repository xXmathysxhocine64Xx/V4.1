#!/bin/bash

# ===============================================
# üöÄ GetYourSite - Installation Simplifi√©e
# ===============================================
# Version stable et minimale - Ubuntu/Debian
# Adapt√© pour la version simplifi√©e

set -e  # Arr√™ter en cas d'erreur

# Variables
PROJECT_NAME="getyoursite"
PROJECT_DIR="/var/www/${PROJECT_NAME}"
CURRENT_DIR="$(pwd)"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Installation GetYourSite - Version Simplifi√©e${NC}"
echo "================================================="

# V√©rification des privil√®ges root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© avec sudo${NC}"
    echo "Usage: sudo $0"
    exit 1
fi

echo -e "${YELLOW}‚ö†Ô∏è  Cette installation va :${NC}"
echo "‚Ä¢ Installer Node.js, Yarn, PM2"
echo "‚Ä¢ Configurer Nginx (optionnel)"
echo "‚Ä¢ D√©ployer GetYourSite dans $PROJECT_DIR"
echo
read -p "Continuer ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Installation annul√©e."
    exit 0
fi

# 1. Mise √† jour du syst√®me
echo -e "${BLUE}üì¶ Mise √† jour du syst√®me...${NC}"
apt update -y
apt install -y curl wget git unzip nginx

# 2. Installation Node.js 18
echo -e "${BLUE}üì¶ Installation Node.js...${NC}"
if ! command -v node &> /dev/null; then
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt-get install -y nodejs
fi

# 3. Installation Yarn et PM2
echo -e "${BLUE}üì¶ Installation Yarn et PM2...${NC}"
if ! command -v yarn &> /dev/null; then
    npm install -g yarn
fi
if ! command -v pm2 &> /dev/null; then
    npm install -g pm2
fi

echo -e "${GREEN}‚úÖ Node.js: $(node --version)${NC}"
echo -e "${GREEN}‚úÖ Yarn: $(yarn --version)${NC}"
echo -e "${GREEN}‚úÖ PM2: $(pm2 --version)${NC}"

# 4. Cr√©ation du r√©pertoire projet
echo -e "${BLUE}üìÅ Pr√©paration du projet...${NC}"
mkdir -p "$PROJECT_DIR"
rm -rf "${PROJECT_DIR:?}"/* 2>/dev/null || true

# 5. Copie des fichiers
echo -e "${BLUE}üìã Copie des fichiers...${NC}"
if [[ -f "$CURRENT_DIR/package.json" && -f "$CURRENT_DIR/app/page.js" ]]; then
    # Copier depuis le r√©pertoire courant
    cp -r "$CURRENT_DIR"/* "$PROJECT_DIR/" 2>/dev/null || true
    cp -r "$CURRENT_DIR"/.[^.]* "$PROJECT_DIR/" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Fichiers copi√©s depuis $CURRENT_DIR${NC}"
else
    echo -e "${RED}‚ùå Fichiers source non trouv√©s dans $CURRENT_DIR${NC}"
    echo "Assurez-vous d'ex√©cuter ce script depuis le r√©pertoire du projet GetYourSite"
    exit 1
fi

# 6. Installation et build
echo -e "${BLUE}üî® Installation des d√©pendances...${NC}"
cd "$PROJECT_DIR"
yarn install --silent

echo -e "${BLUE}üî® Build de l'application...${NC}"
yarn build

# 7. Configuration des permissions
echo -e "${BLUE}üîê Configuration des permissions...${NC}"
chown -R www-data:www-data "$PROJECT_DIR"
chmod +x "$PROJECT_DIR/deploy-simple.sh" 2>/dev/null || true

# 8. D√©marrage avec PM2
echo -e "${BLUE}üöÄ D√©marrage de l'application...${NC}"
pm2 delete "$PROJECT_NAME" 2>/dev/null || true
pm2 start ecosystem.config.js
pm2 startup systemd -u root --hp /root >/dev/null 2>&1 || true
pm2 save >/dev/null

# 9. Configuration Nginx (optionnelle)
echo
read -p "Configurer Nginx comme proxy ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}üåê Configuration Nginx...${NC}"
    
    # Configuration Nginx simple
    cat > /etc/nginx/sites-available/$PROJECT_NAME << EOF
server {
    listen 80;
    server_name _;
    
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF
    
    # Activer le site
    ln -sf /etc/nginx/sites-available/$PROJECT_NAME /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    nginx -t && systemctl reload nginx
    
    echo -e "${GREEN}‚úÖ Nginx configur√©${NC}"
fi

# 10. Configuration Gmail (optionnelle)
echo
read -p "Configurer Gmail pour le formulaire de contact ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Configuration Gmail :${NC}"
    echo "1. Allez sur myaccount.google.com"
    echo "2. S√©curit√© ‚Üí V√©rification en 2 √©tapes (activez-la)"
    echo "3. S√©curit√© ‚Üí Mots de passe des applications"
    echo "4. G√©n√©rez un mot de passe pour 'Courrier'"
    echo
    
    read -p "Votre adresse Gmail: " GMAIL_USER
    read -p "Mot de passe d'application (16 caract√®res): " GMAIL_APP_PASSWORD
    read -p "Email de r√©ception [${GMAIL_USER}]: " GMAIL_RECIPIENT
    
    GMAIL_RECIPIENT=${GMAIL_RECIPIENT:-$GMAIL_USER}
    
    # Mise √† jour du fichier .env
    cat > "$PROJECT_DIR/.env" << EOF
# Configuration Gmail pour le formulaire de contact
GMAIL_USER=$GMAIL_USER
GMAIL_APP_PASSWORD=$GMAIL_APP_PASSWORD
GMAIL_RECIPIENT=$GMAIL_RECIPIENT
EOF

    # Red√©marrage pour prendre en compte les variables
    pm2 restart "$PROJECT_NAME"
    echo -e "${GREEN}‚úÖ Gmail configur√©${NC}"
fi

# 11. Tests finaux
echo -e "${BLUE}üîç Tests de fonctionnement...${NC}"
sleep 3

# Test PM2
if pm2 list | grep -q "$PROJECT_NAME.*online"; then
    echo -e "${GREEN}‚úÖ PM2: Application en ligne${NC}"
else
    echo -e "${RED}‚ùå PM2: Probl√®me d√©tect√©${NC}"
    pm2 logs "$PROJECT_NAME" --lines 5
fi

# Test API
if curl -s http://localhost:3000/api/contact >/dev/null; then
    echo -e "${GREEN}‚úÖ API: Fonctionnelle${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  API: Attendre le d√©marrage complet${NC}"
fi

# Test site principal
if curl -s http://localhost:3000 >/dev/null; then
    echo -e "${GREEN}‚úÖ Site: Accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Site: Attendre le d√©marrage complet${NC}"
fi

# 12. Informations finales
echo
echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"
echo "========================================="

# Obtenir l'IP du serveur
SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || hostname -I | cut -d' ' -f1)

echo -e "${BLUE}üìã INFORMATIONS D'ACC√àS :${NC}"
echo "‚Ä¢ Site local: http://localhost:3000"
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "‚Ä¢ Site externe: http://$SERVER_IP"
fi
echo "‚Ä¢ API de test: http://localhost:3000/api/contact"
echo

echo -e "${BLUE}üõ†Ô∏è  COMMANDES UTILES :${NC}"
echo "‚Ä¢ Statut: pm2 status"
echo "‚Ä¢ Logs: pm2 logs $PROJECT_NAME"
echo "‚Ä¢ Red√©marrer: pm2 restart $PROJECT_NAME"
echo "‚Ä¢ Arr√™ter: pm2 stop $PROJECT_NAME"
echo

echo -e "${BLUE}üìÅ FICHIERS IMPORTANTS :${NC}"
echo "‚Ä¢ Projet: $PROJECT_DIR"
echo "‚Ä¢ Configuration: $PROJECT_DIR/.env"
echo "‚Ä¢ Script de d√©ploiement: $PROJECT_DIR/deploy-simple.sh"
echo

if [[ ! "$GMAIL_USER" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Pour configurer Gmail plus tard :${NC}"
    echo "1. √âditez le fichier: $PROJECT_DIR/.env"
    echo "2. Red√©marrez: pm2 restart $PROJECT_NAME"
fi

echo
echo -e "${GREEN}‚ú® GetYourSite est maintenant install√© et op√©rationnel !${NC}"