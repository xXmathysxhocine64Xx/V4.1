#!/bin/bash

# ===============================================
# üß™ Test du Script d'Installation GetYourSite
# ===============================================
# Teste la compatibilit√© et les pr√©requis

set -euo pipefail

# Couleurs
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

print_test() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì OK]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó ERREUR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö† ATTENTION]${NC} $1"
}

# Tests de compatibilit√©
test_system() {
    print_header "TESTS DE COMPATIBILIT√â SYST√àME"
    
    # Test OS
    print_test "V√©rification du syst√®me d'exploitation..."
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        if [[ "$ID" == "ubuntu" ]]; then
            local version_number
            version_number=$(echo "$VERSION_ID" | cut -d. -f1)
            if [[ "$version_number" -ge 20 ]]; then
                print_success "Ubuntu $VERSION_ID d√©tect√© (compatible)"
            else
                print_error "Ubuntu $VERSION_ID d√©tect√© (version trop ancienne, >= 20.04 requis)"
                return 1
            fi
        else
            print_error "Syst√®me non-Ubuntu d√©tect√©: $ID"
            return 1
        fi
    else
        print_error "Impossible de d√©tecter le syst√®me d'exploitation"
        return 1
    fi
    
    # Test architecture
    print_test "V√©rification de l'architecture..."
    local arch=$(uname -m)
    if [[ "$arch" == "x86_64" || "$arch" == "aarch64" ]]; then
        print_success "Architecture support√©e: $arch"
    else
        print_warning "Architecture non test√©e: $arch"
    fi
    
    # Test m√©moire
    print_test "V√©rification de la m√©moire..."
    local mem_gb=$(free -g | awk '/^Mem:/{print $2}')
    if [[ "$mem_gb" -ge 1 ]]; then
        print_success "M√©moire disponible: ${mem_gb}GB (suffisant)"
    else
        print_warning "M√©moire limit√©e: ${mem_gb}GB (minimum 1GB recommand√©)"
    fi
    
    # Test espace disque
    print_test "V√©rification de l'espace disque..."
    local disk_gb=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [[ "$disk_gb" -ge 5 ]]; then
        print_success "Espace disque disponible: ${disk_gb}GB (suffisant)"
    else
        print_error "Espace disque insuffisant: ${disk_gb}GB (minimum 5GB requis)"
        return 1
    fi
}

# Test des privil√®ges
test_privileges() {
    print_header "TEST DES PRIVIL√àGES"
    
    print_test "V√©rification des privil√®ges root..."
    if [[ $EUID -eq 0 ]]; then
        print_success "Privil√®ges root disponibles"
    else
        print_error "Privil√®ges root requis (utilisez sudo)"
        return 1
    fi
}

# Test connectivit√©
test_connectivity() {
    print_header "TESTS DE CONNECTIVIT√â"
    
    print_test "Test de connectivit√© Internet..."
    if ping -c 1 google.com >/dev/null 2>&1; then
        print_success "Connectivit√© Internet OK"
    else
        print_error "Pas de connectivit√© Internet (requis pour l'installation)"
        return 1
    fi
    
    print_test "Test d'acc√®s aux d√©p√¥ts Ubuntu..."
    if curl -s --connect-timeout 5 archive.ubuntu.com >/dev/null; then
        print_success "Acc√®s aux d√©p√¥ts Ubuntu OK"
    else
        print_warning "Probl√®me d'acc√®s aux d√©p√¥ts Ubuntu"
    fi
    
    print_test "Test d'acc√®s au d√©p√¥t NodeSource..."
    if curl -s --connect-timeout 5 deb.nodesource.com >/dev/null; then
        print_success "Acc√®s au d√©p√¥t NodeSource OK"
    else
        print_warning "Probl√®me d'acc√®s au d√©p√¥t NodeSource"
    fi
}

# Test des ports
test_ports() {
    print_header "TESTS DES PORTS"
    
    print_test "V√©rification du port 80 (HTTP)..."
    if netstat -ln | grep -q ":80 "; then
        print_warning "Port 80 d√©j√† utilis√© (sera reconfigur√©)"
    else
        print_success "Port 80 disponible"
    fi
    
    print_test "V√©rification du port 3000 (Next.js)..."
    if netstat -ln | grep -q ":3000 "; then
        print_warning "Port 3000 d√©j√† utilis√© (sera reconfigur√©)"
    else
        print_success "Port 3000 disponible"
    fi
    
    print_test "V√©rification du port 443 (HTTPS)..."
    if netstat -ln | grep -q ":443 "; then
        print_warning "Port 443 d√©j√† utilis√© (normal si HTTPS configur√©)"
    else
        print_success "Port 443 disponible"
    fi
}

# Test des services existants
test_existing_services() {
    print_header "TESTS DES SERVICES EXISTANTS"
    
    print_test "V√©rification de Apache..."
    if systemctl is-active --quiet apache2 2>/dev/null; then
        print_warning "Apache2 actif (conflit potentiel avec Nginx)"
    else
        print_success "Apache2 non actif"
    fi
    
    print_test "V√©rification de Nginx..."
    if systemctl is-active --quiet nginx 2>/dev/null; then
        print_warning "Nginx d√©j√† actif (sera reconfigur√©)"
    else
        print_success "Nginx non actif"
    fi
    
    print_test "V√©rification de Node.js..."
    if command -v node >/dev/null 2>&1; then
        local node_version=$(node --version)
        print_warning "Node.js d√©j√† install√©: $node_version (sera mis √† jour si n√©cessaire)"
    else
        print_success "Node.js non install√© (sera install√©)"
    fi
    
    print_test "V√©rification de PM2..."
    if command -v pm2 >/dev/null 2>&1; then
        print_warning "PM2 d√©j√† install√© (sera reconfigur√©)"
    else
        print_success "PM2 non install√© (sera install√©)"
    fi
}

# Test de simulation (dry-run)
test_dry_run() {
    print_header "SIMULATION D'INSTALLATION"
    
    print_test "Test de cr√©ation de r√©pertoire..."
    local test_dir="/tmp/getyoursite-test-$$"
    if mkdir -p "$test_dir" && rmdir "$test_dir"; then
        print_success "Permissions de cr√©ation de r√©pertoire OK"
    else
        print_error "Probl√®me de permissions pour cr√©er des r√©pertoires"
        return 1
    fi
    
    print_test "Test d'√©criture dans /var/www..."
    if [[ -w /var/www ]] || mkdir -p /var/www/test-$$ && rmdir /var/www/test-$$ 2>/dev/null; then
        print_success "Permissions d'√©criture dans /var/www OK"
    else
        print_error "Probl√®me de permissions dans /var/www"
        return 1
    fi
    
    print_test "Test d'√©criture dans /etc..."
    if [[ $EUID -eq 0 ]]; then
        # Si root, on peut √©crire dans /etc
        print_success "Permissions d'√©criture dans /etc OK (root)"
    elif [[ -w /etc ]]; then
        # Si le r√©pertoire est accessible en √©criture
        print_success "Permissions d'√©criture dans /etc OK"
    else
        # Pas de permissions, mais c'est normal en non-root
        print_success "Permissions d'√©criture dans /etc (sudo requis pour installation)"
    fi
}

# R√©sum√© et recommandations
show_summary() {
    print_header "R√âSUM√â ET RECOMMANDATIONS"
    
    echo -e "${GREEN}‚úÖ Tests pass√©s avec succ√®s${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Avertissements √† noter${NC}"
    echo -e "${RED}‚ùå Erreurs bloquantes${NC}"
    echo
    
    echo "üìã PR√âREQUIS POUR L'INSTALLATION :"
    echo "   ‚Ä¢ Ubuntu 20.04 LTS ou plus r√©cent"
    echo "   ‚Ä¢ Privil√®ges root (sudo)"
    echo "   ‚Ä¢ Connectivit√© Internet"
    echo "   ‚Ä¢ Au moins 1GB de RAM"
    echo "   ‚Ä¢ Au moins 5GB d'espace disque libre"
    echo
    
    echo "üöÄ POUR LANCER L'INSTALLATION :"
    echo "   sudo ./setup-getyoursite.sh"
    echo
    
    echo "üìû EN CAS DE PROBL√àME :"
    echo "   ‚Ä¢ V√©rifiez les logs de ce test"
    echo "   ‚Ä¢ Assurez-vous d'avoir une connexion Internet stable"
    echo "   ‚Ä¢ Lib√©rez de l'espace disque si n√©cessaire"
    echo "   ‚Ä¢ Arr√™tez les services conflictuels (Apache, etc.)"
}

# Fonction principale
main() {
    print_header "TEST D'INSTALLATION GETYOURSITE"
    echo "Ce script v√©rifie la compatibilit√© de votre syst√®me avec GetYourSite"
    echo
    
    local error_count=0
    
    # Ex√©cution des tests
    test_system || ((error_count++))
    test_privileges || ((error_count++))
    test_connectivity || ((error_count++))
    test_ports || ((error_count++))
    test_existing_services || ((error_count++))
    test_dry_run || ((error_count++))
    
    echo
    show_summary
    
    if [[ $error_count -eq 0 ]]; then
        print_success "‚úÖ Votre syst√®me est pr√™t pour l'installation GetYourSite !"
        exit 0
    else
        print_error "‚ùå $error_count erreur(s) d√©tect√©e(s). Corrigez les probl√®mes avant d'installer."
        exit 1
    fi
}

# Gestion des erreurs
trap 'echo -e "\n${RED}Test interrompu${NC}"; exit 1' ERR

# D√©marrage
main "$@"